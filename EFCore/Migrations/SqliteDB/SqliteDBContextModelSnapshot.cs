// <auto-generated />
using System;
using EFCore.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFCore.Migrations.SqliteDB
{
    [DbContext(typeof(SqliteDBContext))]
    partial class SqliteDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("EFCore.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("str_fld_Address");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("str_fld_City");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("str_fld_Email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("str_fld_FirstName");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("str_fld_LastName");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("str_fld_Phone");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("str_fld_State");

                    b.Property<string>("Zipcode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasColumnName("str_fld_Zipcode");

                    b.HasKey("CustomerId");

                    b.HasIndex("LastName");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("EFCore.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("OrderID");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CustomerID");

                    b.Property<byte[]>("LastUpdate")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SalespersonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SalespersonID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("('none')");

                    b.Property<decimal?>("TotalDue")
                        .HasColumnType("money");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalespersonId");

                    b.HasIndex(new[] { "OrderDate" }, "IX_Order")
                        .IsDescending();

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("EFCore.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("OrderItemID");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("OrderID");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("ProductID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("EFCore.Models.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT")
                        .HasColumnName("ProductID");

                    b.Property<bool>("Perishable")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Variety")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.HasKey("ProductId");

                    b.ToTable("Product", (string)null);

                    b.HasDiscriminator<bool>("Perishable").HasValue(false);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EFCore.Models.SalesGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "State", "Type" }, "IX_StateType")
                        .IsUnique();

                    b.ToTable("SalesGroup", (string)null);
                });

            modelBuilder.Entity("EFCore.Models.Salesperson", b =>
                {
                    b.Property<int>("SalespersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("SalespersonID");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("TEXT");

                    b.Property<string>("SalesGroupState")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2)
                        .HasColumnType("TEXT")
                        .HasDefaultValue("CA");

                    b.Property<int>("SalesGroupType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(1);

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<string>("Zipcode")
                        .HasColumnType("TEXT");

                    b.HasKey("SalespersonId");

                    b.HasIndex("SalesGroupState", "SalesGroupType");

                    b.ToTable("Salesperson", (string)null);
                });

            modelBuilder.Entity("EFCore.Models.PerishableProduct", b =>
                {
                    b.HasBaseType("EFCore.Models.Product");

                    b.Property<int?>("ExpirationDays")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Refrigerated")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue(true);
                });

            modelBuilder.Entity("EFCore.Models.Order", b =>
                {
                    b.HasOne("EFCore.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Customer");

                    b.HasOne("EFCore.Models.Salesperson", "Salesperson")
                        .WithMany("Orders")
                        .HasForeignKey("SalespersonId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Salesperson");

                    b.Navigation("Customer");

                    b.Navigation("Salesperson");
                });

            modelBuilder.Entity("EFCore.Models.OrderItem", b =>
                {
                    b.HasOne("EFCore.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItem_Order");

                    b.HasOne("EFCore.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderItem_Product1");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EFCore.Models.Salesperson", b =>
                {
                    b.HasOne("EFCore.Models.SalesGroup", "SalesGroup")
                        .WithMany("salesperson")
                        .HasForeignKey("SalesGroupState", "SalesGroupType")
                        .HasPrincipalKey("State", "Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesGroup");
                });

            modelBuilder.Entity("EFCore.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EFCore.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("EFCore.Models.Product", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("EFCore.Models.SalesGroup", b =>
                {
                    b.Navigation("salesperson");
                });

            modelBuilder.Entity("EFCore.Models.Salesperson", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
